diff --git a/BUILD.gn b/BUILD.gn
index 31548394c..1a920f85b 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -149,6 +149,11 @@ config("perfetto_config") {
 # test code (test support and anything in the test directory) which should use
 # source_set as is recommended for GN targets).
 component("base") {
+  output_name = "chromium_base"
+  if (!is_component_build) {
+    complete_static_lib = true
+    configs -= [ "//build/config/compiler:thin_archive" ]
+  }
   sources = [
     "allocator/allocator_check.cc",
     "allocator/allocator_check.h",
@@ -1704,7 +1709,7 @@ component("base") {
     "hash/md5_constexpr_internal.h",
     "hash/sha1.h",
   ]
-  if (is_nacl) {
+  if (true) {
     sources += [
       "hash/md5_nacl.cc",
       "hash/md5_nacl.h",
@@ -2469,6 +2474,7 @@ buildflag_header("profiler_buildflags") {
 # library. Note that this library cannot depend on base because base depends on
 # base_static.
 static_library("base_static") {
+  output_name = "chromium_base_static"
   sources = [
     "base_switches.cc",
     "base_switches.h",
@@ -2498,7 +2504,7 @@ static_library("base_static") {
 }
 
 component("i18n") {
-  output_name = "base_i18n"
+  output_name = "chromium_base_i18n"
   sources = [
     "i18n/base_i18n_export.h",
     "i18n/base_i18n_switches.cc",
diff --git a/bits.h b/bits.h
index a139a719d..b5c1c58e8 100644
--- a/bits.h
+++ b/bits.h
@@ -79,7 +79,7 @@ inline T* AlignUp(T* ptr, size_t alignment) {
 #if defined(COMPILER_MSVC)
 
 template <typename T, unsigned bits = sizeof(T) * 8>
-ALWAYS_INLINE
+ALWAYS_INLINE constexpr
     typename std::enable_if<std::is_unsigned<T>::value && sizeof(T) <= 4,
                             unsigned>::type
     CountLeadingZeroBits(T x) {
@@ -91,7 +91,7 @@ ALWAYS_INLINE
 }
 
 template <typename T, unsigned bits = sizeof(T) * 8>
-ALWAYS_INLINE
+ALWAYS_INLINE constexpr
     typename std::enable_if<std::is_unsigned<T>::value && sizeof(T) == 8,
                             unsigned>::type
     CountLeadingZeroBits(T x) {
@@ -116,7 +116,7 @@ ALWAYS_INLINE
 }
 
 template <typename T, unsigned bits = sizeof(T) * 8>
-ALWAYS_INLINE
+ALWAYS_INLINE constexpr
     typename std::enable_if<std::is_unsigned<T>::value && sizeof(T) <= 4,
                             unsigned>::type
     CountTrailingZeroBits(T x) {
@@ -127,7 +127,7 @@ ALWAYS_INLINE
 }
 
 template <typename T, unsigned bits = sizeof(T) * 8>
-ALWAYS_INLINE
+ALWAYS_INLINE constexpr
     typename std::enable_if<std::is_unsigned<T>::value && sizeof(T) == 8,
                             unsigned>::type
     CountTrailingZeroBits(T x) {
@@ -150,11 +150,11 @@ ALWAYS_INLINE
 #endif
 }
 
-ALWAYS_INLINE uint32_t CountLeadingZeroBits32(uint32_t x) {
+ALWAYS_INLINE constexpr uint32_t CountLeadingZeroBits32(uint32_t x) {
   return CountLeadingZeroBits(x);
 }
 
-ALWAYS_INLINE uint64_t CountLeadingZeroBits64(uint64_t x) {
+ALWAYS_INLINE constexpr uint64_t CountLeadingZeroBits64(uint64_t x) {
   return CountLeadingZeroBits(x);
 }
 
diff --git a/compiler_specific.h b/compiler_specific.h
index 0e1140330..d615ff9c8 100644
--- a/compiler_specific.h
+++ b/compiler_specific.h
@@ -340,7 +340,7 @@ inline constexpr bool AnalyzerAssumeTrue(bool arg) {
 #endif  // defined(__clang_analyzer__)
 
 // Use nomerge attribute to disable optimization of merging multiple same calls.
-#if defined(__clang__) && __has_attribute(nomerge)
+#if defined(__clang__) && __has_attribute(nomerge) && false
 #define NOMERGE [[clang::nomerge]]
 #else
 #define NOMERGE
diff --git a/gtest_prod_util.h b/gtest_prod_util.h
index 2ca267e27..0a0b6dfde 100644
--- a/gtest_prod_util.h
+++ b/gtest_prod_util.h
@@ -5,7 +5,8 @@
 #ifndef BASE_GTEST_PROD_UTIL_H_
 #define BASE_GTEST_PROD_UTIL_H_
 
-#include "testing/gtest/include/gtest/gtest_prod.h"  // nogncheck
+#define FRIEND_TEST(test_case_name, test_name)\
+friend class test_case_name##_##test_name##_Test
 
 // This is a wrapper for gtest's FRIEND_TEST macro that friends
 // test with all possible prefixes. This is very helpful when changing the test
diff --git a/hash/md5.h b/hash/md5.h
index 8a49f08dc..24acdaba5 100644
--- a/hash/md5.h
+++ b/hash/md5.h
@@ -11,7 +11,7 @@
 #include "base/strings/string_piece.h"
 #include "build/build_config.h"
 
-#if defined(OS_NACL)
+#if true
 #include "base/hash/md5_nacl.h"
 #else
 #include "base/hash/md5_boringssl.h"
diff --git a/hash/md5_nacl.cc b/hash/md5_nacl.cc
index 827bbbdbb..4b22c59d9 100644
--- a/hash/md5_nacl.cc
+++ b/hash/md5_nacl.cc
@@ -22,6 +22,7 @@
  */
 
 #include <stddef.h>
+#include <string.h>
 
 #include "base/hash/md5.h"
 
diff --git a/hash/sha1.h b/hash/sha1.h
index 5bb10fe06..e773ddf74 100644
--- a/hash/sha1.h
+++ b/hash/sha1.h
@@ -14,7 +14,7 @@
 #include "base/containers/span.h"
 #include "base/strings/string_piece.h"
 #include "build/build_config.h"
-#if defined(OS_NACL)
+#if 1
 #include "base/hash/sha1_nacl.h"
 #else
 #include "base/hash/sha1_boringssl.h"
diff --git a/profiler/stack_copier_signal.cc b/profiler/stack_copier_signal.cc
index 89db2e601..84a9485e9 100644
--- a/profiler/stack_copier_signal.cc
+++ b/profiler/stack_copier_signal.cc
@@ -6,6 +6,7 @@
 
 #include <linux/futex.h>
 #include <signal.h>
+#include <string.h>
 #include <sys/ucontext.h>
 #include <syscall.h>
 
