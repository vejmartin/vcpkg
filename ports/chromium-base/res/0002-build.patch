diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index 46bc47692..377e75fa8 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -564,6 +564,7 @@ template("component") {
   target(_component_mode, target_name) {
     forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
     forward_variables_from(invoker, "*", TESTONLY_AND_VISIBILITY)
+    not_needed("*")
   }
 }
 
diff --git a/config/apple/sdk_info.py b/config/apple/sdk_info.py
index fea680101..6151065b9 100644
--- a/config/apple/sdk_info.py
+++ b/config/apple/sdk_info.py
@@ -76,12 +76,17 @@ def FillXcodeVersion(settings, developer_dir):
     settings['xcode_version_int'] = int(settings['xcode_version'], 10)
     settings['xcode_build'] = version_plist['ProductBuildVersion']
     return
-
-  lines = subprocess.check_output(['xcodebuild',
-                                   '-version']).decode('UTF-8').splitlines()
-  settings['xcode_version'] = FormatVersion(lines[0].split()[-1])
-  settings['xcode_version_int'] = int(settings['xcode_version'], 10)
-  settings['xcode_build'] = lines[-1].split()[-1]
+  
+  try:
+    lines = subprocess.check_output(['xcodebuild',
+                                     '-version']).decode('UTF-8').splitlines()
+    settings['xcode_version'] = FormatVersion(lines[0].split()[-1])
+    settings['xcode_version_int'] = int(settings['xcode_version'], 10)
+    settings['xcode_build'] = lines[-1].split()[-1]
+  except:
+    settings['xcode_version'] = ""
+    settings['xcode_version_int'] = 0
+    settings['xcode_build'] = ""
 
 
 def FillMachineOSBuild(settings):
diff --git a/config/clang/BUILD.gn b/config/clang/BUILD.gn
index 180e2e626..97fe21dc6 100644
--- a/config/clang/BUILD.gn
+++ b/config/clang/BUILD.gn
@@ -42,6 +42,8 @@ config("extra_warnings") {
     "-Wstring-conversion",
 
     "-Wtautological-overlap-compare",
+    "-Wno-unknown-warning-option",
+    "-Wno-unknown-pragmas"
   ]
 }
 
diff --git a/mac/find_sdk.py b/mac/find_sdk.py
index d86f31093..4474281f7 100755
--- a/mac/find_sdk.py
+++ b/mac/find_sdk.py
@@ -68,6 +68,8 @@ def main():
   dev_dir = out.decode('UTF-8').rstrip()
   sdk_dir = os.path.join(
       dev_dir, 'Platforms/MacOSX.platform/Developer/SDKs')
+  if not os.path.isdir(sdk_dir):
+    sdk_dir = os.path.join(dev_dir, 'SDKs')
 
   if not os.path.isdir(sdk_dir):
     raise SdkError('Install Xcode, launch it, accept the license ' +
@@ -79,7 +81,7 @@ def main():
           if parse_version(s) >= parse_version(min_sdk_version)]
   if not sdks:
     raise Exception('No %s+ SDK found' % min_sdk_version)
-  best_sdk = sorted(sdks, key=parse_version)[0]
+  best_sdk = sorted(sdks, key=parse_version)[-1]
 
   if options.print_sdk_path:
     sdk_name = 'MacOSX' + best_sdk + '.sdk'
@@ -87,7 +89,10 @@ def main():
 
   if options.print_bin_path:
     bin_path = 'Toolchains/XcodeDefault.xctoolchain/usr/bin/'
-    print(os.path.join(dev_dir, bin_path))
+    if os.path.isdir(os.path.join(dev_dir, bin_path)):
+      print(os.path.join(dev_dir, bin_path))
+    else:
+      print(os.path.join(dev_dir, 'usr/bin/'))
 
   return best_sdk
 
diff --git a/toolchain/apple/toolchain.gni b/toolchain/apple/toolchain.gni
index 80fa7b375..5a8442d6d 100644
--- a/toolchain/apple/toolchain.gni
+++ b/toolchain/apple/toolchain.gni
@@ -184,9 +184,9 @@ template("apple_toolchain") {
     # If dSYMs are enabled, this flag will be added to the link tools.
     if (_enable_dsyms) {
       dsym_switch = " -Wcrl,dsym,{{root_out_dir}} "
-      dsym_switch += "-Wcrl,dsymutilpath," +
-                     rebase_path("//tools/clang/dsymutil/bin/dsymutil",
-                                 root_build_dir) + " "
+      # dsym_switch += "-Wcrl,dsymutilpath," +
+      #                rebase_path("//tools/clang/dsymutil/bin/dsymutil",
+      #                            root_build_dir) + " "
 
       dsym_output_dir =
           "{{root_out_dir}}/{{target_output_name}}{{output_extension}}.dSYM"
diff --git a/toolchain/win/BUILD.gn b/toolchain/win/BUILD.gn
index a8137526d..cbf51b2e7 100644
--- a/toolchain/win/BUILD.gn
+++ b/toolchain/win/BUILD.gn
@@ -103,7 +103,7 @@ template("msvc_toolchain") {
       } else {
         lld_link = "lld-link"
       }
-      prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+      prefix = "$clang_base_path/bin"
 
       # lld-link includes a replacement for lib.exe that can produce thin
       # archives and understands bitcode (for lto builds).
@@ -195,7 +195,7 @@ template("msvc_toolchain") {
       # amount of data to parse and store in .ninja_deps. We do this on non-Windows too,
       # and already make sure rebuilds after win sdk / libc++ / clang header updates happen via
       # changing commandline flags.
-      show_includes = "/showIncludes:user"
+      show_includes = ""
     } else {
       show_includes = "/showIncludes"
     }
@@ -240,7 +240,7 @@ template("msvc_toolchain") {
 
       if (toolchain_args.current_cpu == "arm64") {
         if (is_clang) {
-          prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+          prefix = "$clang_base_path/bin"
           ml = "${clang_prefix}${prefix}/${clang_cl} --target=arm64-windows"
           if (host_os == "win") {
             # Flip the slashes so that copy/paste of the command works.
@@ -448,11 +448,9 @@ template("win_toolchains") {
 
   msvc_toolchain("win_clang_" + target_name) {
     environment = "environment." + toolchain_arch
-    prefix = rebase_path("$clang_base_path/bin", root_build_dir)
+    prefix = "$clang_base_path/bin"
     cl = "${clang_prefix}$prefix/${clang_cl}"
-    _clang_lib_dir =
-        rebase_path("$clang_base_path/lib/clang/$clang_version/lib/windows",
-                    root_build_dir)
+    _clang_lib_dir = "$clang_base_path/lib/clang/$clang_version/lib/windows"
     if (host_os == "win") {
       # Flip the slashes so that copy/paste of the command works.
       cl = string_replace(cl, "/", "\\")
@@ -463,7 +461,7 @@ template("win_toolchains") {
 
     sys_include_flags = "${win_toolchain_data.include_flags_imsvc}"
     sys_lib_flags =
-        "-libpath:$_clang_lib_dir ${win_toolchain_data.libpath_flags}"
+        "-libpath:\"$_clang_lib_dir\" ${win_toolchain_data.libpath_flags}"
 
     toolchain_args = {
       if (defined(invoker.toolchain_args)) {
